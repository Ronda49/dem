name: CI-CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: "3.11"

jobs:
  # 1Ô∏è‚É£ CODE CHECKOUT
  checkout:
    name: Code Checkout
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

  # 2Ô∏è‚É£ INSTALL DEPENDENCIES
  install:
    name: Install Dependencies
    runs-on: ubuntu-latest
    needs: checkout

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

  # 3Ô∏è‚É£ LINTING & QUALITY CHECK
  lint:
    name: Code Linting & Quality Check
    runs-on: ubuntu-latest
    needs: install

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install lint tools
        run: pip install black flake8 isort

      - name: Black formatting check
        run: black --check .

      - name: Import sorting check
        run: isort . --check-only

      - name: Code lint check
        run: flake8 .

  # 4Ô∏è‚É£ BUILD / COMPILE
  build:
    name: Build / Compile Application
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Build package
        run: |
          pip install build
          python -m build

  # 5Ô∏è‚É£ UNIT TESTS
  unit_test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run unit tests
        run: pytest -v --maxfail=1 --disable-warnings

  # 6Ô∏è‚É£ INTEGRATION TESTS
  integration_test:
    name: Run Integration Tests
    runs-on: ubuntu-latest
    needs: unit_test

    steps:
      - uses: actions/checkout@v4

      - name: Run integration tests (placeholder)
        run: |
          echo "Running integration tests..."
          pytest tests/integration/ || echo "No integration tests found"

  # 7Ô∏è‚É£ SECURITY SCAN (Trivy)
  security_scan:
    name: Security Scan with Trivy
    runs-on: ubuntu-latest
    needs: integration_test

    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy FS scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          ignore-unfixed: true
          format: table
          severity: CRITICAL,HIGH

  # 8Ô∏è‚É£ PUSH TO ARTIFACT REPOSITORY
  push_artifact:
    name: Push Build to Artifact Repository
    runs-on: ubuntu-latest
    needs: security_scan

    steps:
      - uses: actions/checkout@v4

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: fastapi-app-build
          path: dist/

  # üöÄ CD PIPELINE ‚Äî DEPLOY TO ENVIRONMENTS
  deploy:
    name: Deploy to Environment
    runs-on: ubuntu-latest
    needs: push_artifact

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: fastapi-app-build
          path: ./build

      - name: Deploy to environment
        run: |
          echo "Deploying to environment..."
          # Example: kubectl apply -f deployment.yaml
          # or gcloud run deploy ...
