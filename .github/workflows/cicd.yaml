name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # -------------------------------
  # 1️⃣ Code Checkout
  # -------------------------------
  code-checkout:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

  # -------------------------------
  # 2️⃣ Install Dependencies
  # -------------------------------
  install-dependencies:
    runs-on: ubuntu-latest
    needs: code-checkout
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 black isort pytest httpx

      - name: Upload dependency-ready code
        uses: actions/upload-artifact@v4
        with:
          name: fastapi-app-build
          path: |
            .
            !.git/
            !__pycache__/

  # -------------------------------
  # 3️⃣ Code Linting & Quality Check
  # -------------------------------
  linting:
    runs-on: ubuntu-latest
    needs: install-dependencies
    steps:
      - name: Download prepared code
        uses: actions/download-artifact@v4
        with:
          name: fastapi-app-build

      - name: Lint with flake8
        run: flake8 . --max-line-length=88

      - name: Check code formatting with black
        run: black --check .

      - name: Sort imports with isort
        run: isort . --check-only

  # -------------------------------
  # 4️⃣ Build / Compile
  # -------------------------------
  build:
    runs-on: ubuntu-latest
    needs: linting
    steps:
      - name: Download code for build
        uses: actions/download-artifact@v4
        with:
          name: fastapi-app-build

      - name: Build package (simulate build)
        run: |
          echo "Building Python package..."
          python -m build || echo "No pyproject.toml, skipping build step."

      - name: Upload built artifact
        uses: actions/upload-artifact@v4
        with:
          name: fastapi-app-build
          path: |
            .
            !.git/
            !__pycache__/

  # -------------------------------
  # 5️⃣ Unit Tests
  # -------------------------------
  unit-test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download built artifact
        uses: actions/download-artifact@v4
        with:
          name: fastapi-app-build

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Run unit tests
        run: pytest -v

  # -------------------------------
  # 6️⃣ Integration Tests
  # -------------------------------
  integration-test:
    runs-on: ubuntu-latest
    needs: unit-test
    steps:
      - name: Download code for integration test
        uses: actions/download-artifact@v4
        with:
          name: fastapi-app-build

      - name: Integration test placeholder
        run: echo "Running integration tests... (add real tests later)"

  # -------------------------------
  # 7️⃣ Security Scan (Trivy)
  # -------------------------------
  security-scan:
    runs-on: ubuntu-latest
    needs: integration-test
    steps:
      - name: Download code for security scan
        uses: actions/download-artifact@v4
        with:
          name: fastapi-app-build

      - name: Install Trivy
        run: |
          sudo apt-get update -y
          sudo apt-get install wget -y
          wget https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh
          chmod +x install.sh
          ./install.sh
          sudo mv ./bin/trivy /usr/local/bin/

      - name: Run Trivy FS scan
        run: trivy fs . || echo "Trivy scan completed with warnings"

  # -------------------------------
  # 8️⃣ Deploy to Environment
  # -------------------------------
  deploy:
    runs-on: ubuntu-latest
    needs: security-scan
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: fastapi-app-build

      - name: Deploy application
        run: |
          echo "Deploying to environment..."
          # Example commands:
          # kubectl apply -f deployment.yaml
          # gcloud run deploy my-fastapi-app --source . --region=us-central1
